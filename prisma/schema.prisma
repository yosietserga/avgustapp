generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_PRISMA_URL")
}

enum ProductType {
  insecticida
  fungicida
  herbicida
  nutricion
  feromonas
  otros_insumos
}

model Country {
  id              Int      @id @default(autoincrement())
  nombre          String   @db.VarChar(255)
  code            String   @db.VarChar(5)
  crops           Crop[]
  users           User[]
}
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  countryId Int
  country   Country  @relation(fields: [countryId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Crop {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  image       String?
  country_id  Int?
  country     Country? @relation(fields: [country_id], references: [id])
  objectives  Objective[]
  stages      Stage[]
  segments    Segment[]
  products    Product[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Objective {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  icon        String?
  cropId      Int
  crop        Crop      @relation(fields: [cropId], references: [id])
  segments    Segment[]
  stages      Stage[]
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Segment {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  cropId      Int
  crop        Crop      @relation(fields: [cropId], references: [id])
  objectiveId Int
  objective   Objective @relation(fields: [objectiveId], references: [id])
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Stage {
  id          Int       @id @default(autoincrement())
  name        String
  order       Int
  description String?
  cropId      Int
  crop        Crop      @relation(fields: [cropId], references: [id])
  objectiveId Int
  objective   Objective @relation(fields: [objectiveId], references: [id])
  productsStart  Product[] @relation("StageProductStart")
  productsEnd    Product[] @relation("StageProductEnd")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  image       String?
  productType ProductType
  cropId      Int?
  crop        Crop?      @relation(fields: [cropId], references: [id])
  segmentId   Int?
  segment     Segment? @relation(fields: [segmentId], references: [id])
  objectiveId Int
  objective   Objective @relation(fields: [objectiveId], references: [id])
  startStageId Int?
  startStage  Stage?   @relation("StageProductStart", fields: [startStageId], references: [id])
  startPercent Float?
  endStageId  Int?
  endStage    Stage?   @relation("StageProductEnd", fields: [endStageId], references: [id])
  endPercent  Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}